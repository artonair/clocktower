<?php


/* ******************************************************* */
/* DRUPAL FUNCTIONS */
/* ******************************************************* */

/**
 * Implementation of hook_menu().
 */
function xspf_playlist_menu() {
  $items = array();
  // XSPF content landing page
  $items['admin/content/xspf_playlist'] = array(
    'title' => 'XSPF Playlist',
    'description' => 'XSPF playlists for content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xspf_playlist_admin_settings_form'),
    'access arguments' => array('administer xspf_playlist'),
  );
  // XSPF content default tab
  $items['admin/content/xspf_playlist/default'] = array(
    'title' => 'XSPF Playlist Settings',
    'description' => 'XSPF playlist building',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  return $items;
}


/**
 * Menu callback for administrative settings.
 * @param array $form
 * @param string $content_type
 *   drupal content type name
 * @return array
 */
function xspf_playlist_admin_settings_form($form) {
  $form = array();

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
  );
  $form['settings']['xspf_playlist_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Default playlist title'),
    '#default_value' => variable_get('xspf_playlist_title', t('!sitename playlist', array('!sitename' =>  variable_get('site_name', 'Drupal')))),
    '#description' => t('Displayed on playlist.'),
  );
  $form['settings']['xspf_playlist_info'] = array(
    '#type' => 'textfield',
    '#title' => t('Default playlist info'),
    '#default_value' => variable_get('xspf_playlist_info', ''),
    '#description' => t('Information about this playlist. Some players will display this information')
  );
  $form['settings']['xspf_playlist_filetypes'] = array(
    '#type' => 'textfield',
    '#title' => t('File type support'),
    '#default_value' => variable_get('xspf_playlist_filetypes', 'flv jpg gif png mp3'),
    '#description' =>t('Will only use attached files of these file types. Space separated list of file types you wish to support.'),
  );
  return system_settings_form($form);
}


/**
 * Implementation of hook_perm().
 */
function xspf_playlist_perm() {
  return array('administer xspf_playlist');
}

/* ******************************************************* */
/* xspf_playlist FUNCTIONS */
/* ******************************************************* */

/**
 * fires a module action
 * @param $hook is the hook name
 * @param $op is the operator to call
 * @param $node is a drupal node object
 * @param $config
 *   set a specific value to use to gather data
 * @param $modules
 *   list of specific modules to gather data from
 * @return array
 */
function xspf_playlist_extend($hook, $op, $node, $config, $modules = null) {
  // are there specific modules being passed in?
  if ($modules) {
    foreach($modules as $module) {
      // break the configuration out
      list($module_name, $seperator, $data) = split('[--]', $module);
      if ($item = module_invoke($module_name, $hook, $op, $node, $config, $data)) {
        $ret[] = $item;
      }
    }
  }
  else {
    // default is to use all modules that implement the hook
    foreach (module_implements($hook) as $module) {
      if ($data = module_invoke($module, $hook, $op, $node, $config)) {
        $ret[] = $data;
      }
    }
  }
  return $ret;
}


/**
 * fires a module action
 * @param $hook is the hook name
 * @param $op is the operator to call
 * @param $node is a drupal node object
 * @param $config
 * @return array
 */
function xspf_playlist_invoke_fire($hook, $op, $node = NULL, $config) {
  // split the config data up
  list ($module_name, $seperator, $config) = split('[--]', $config);

  if (module_exists($module_name)) {
    if ($output = module_invoke($module_name, $hook, $op, $node, $config)) {
      return $output;
    }
  }
}


/**
 * Helper function to return the value of a given key for a playlist item.
 *
 * @param array $item
 *   A playlist item.
 * @param string $key
 *   The key to find a value for.
 * @return string
 *   The key's value, if found.
 */
function xspf_playlist_item_get_value($item, $key) {
  foreach ($item as $attribute) {
    if (isset($attribute['key']) && $attribute['key'] == $key && isset($attribute['value'])) {
      return $attribute['value'];
    }
  }
}


/**
 * Helper function to set the value of a given key for a playlist item.
 *
 * @param $item
 *   array, A playlist item.
 * @param $data
 *   array, array('key' => , 'value' => , 'attributes' =>
 * @param $value
 *   string, The value to set the key to.
 * @param $append
 *   boolean, should the new value be appened to the $item
 * @param $override
 *   boolean, allows a calling function to overrided an existing value, or prevent it
 */
function xspf_playlist_item_set_value(&$item, $data, $append = TRUE, $override = FALSE) {
	if (! $append) {
	  // Set an existing key
	  foreach ($item as $index => $attribute) {
	    if (isset($attribute['key']) && $attribute['key'] == $data['key'] && $override) {
	      $item[$index] = $data;
	      return;
	    }
	  }
	}
  // If there was no existing attribute with the key, create a new one.
  $item[] = $data;
}


/**
 * helper function for the playlist configuration info
 * should probably be an admin setting
 * @return array
 */
function xspf_playlist_default_playlist_data() {
  $configuration = array(
    'title' => variable_get('xspf_playlist_title', variable_get('site_name', t('My playlist'))),
    'info' => url(null, array('absolute' => TRUE)),
    'annotation' => variable_get('xspf_playlist_info', ''),
  );
  return $configuration;
}


/**
 * Adaptation of Drupal 6 drupal_alter().
 *
 * Simplified because we don't need additional arguments passed by reference.
 *
 * @TODO: remove in the D6 upgrade.
 */
function xspf_playlist_alter($type, &$data) {
  // Hang onto a reference to the data array so that it isn't blown away later.
  // Also, merge in any parameters that need to be passed by reference.
  $args = array(&$data);

  // Now, use func_get_args() to pull in any additional parameters passed into
  // the drupal_alter() call.
  $additional_args = func_get_args();
  array_shift($additional_args);
  array_shift($additional_args);
  $args = array_merge($args, $additional_args);
  foreach (module_implements($type .'_alter') as $module) {
    $function = $module .'_'. $type .'_alter';
    call_user_func_array($function, $args);
  }
}

/**
 * Build a playlist item by passing it through altering.
 *
 * @param array $item
 *   The playlist item.
 * @param object $object
 *   An object with which the playlist item is associated.
 * @param string $url
 *   The url to a file that is being added to the items array.
 * @param string $thumb
 *   A thumbnail path string.
 * @param array $meta
 *   Metadata associated with the item.
 */
function xspf_playlist_build_item(&$item, $object, $url, $thumb, $meta) {
  // TODO: update to drupal_alter() for D6.
  xspf_playlist_alter('xspf_playlist_item', $item, $object, $url, $thumb, $meta);
}

/**
 * Build a playlist list by passing it through altering.
 *
 * @param array $playlist
 *   An array of configuration data.
 * @param string $type
 *   A type of object for which the playlist is being constructed, e.g., 'node', 'view'.
 * @param string $subtype
 *   A subtype for the object type. Used for node types.
 * @param object or array $object
 *   An object (e.g., node, view) for which the playlist is being constructed.
 * @param object $node
 *   A drupal node object
 */
function xspf_playlist_build_list(&$playlist, $type = NULL, $subtype = NULL, $object = NULL) {
  // TODO: update to drupal_alter() for D6.
  xspf_playlist_alter('xspf_playlist_list', $playlist, $type, $subtype, $object);
}


/**
 * checks filemimes
 * @NOTE is this needed here?
 * @return TRUE
 */
function _xspf_playlist_filetype_supported($filetype) {
  $allowed = variable_get('xspf_playlist_filetypes', 'flv jpg gif png mp3');
  $pattern = "/$filetype/i";
  preg_match($pattern, $allowed, $matches);
  if ($matches) {
    return TRUE;
  }
}


/**
 * Helper function to find the mime type of a file
 * @param $filepath
 * @return string
 */
function xspf_playlist_item_mime($filepath) {
  // Drupal's mime type function does not support flv
  if (pathinfo($filepath, PATHINFO_EXTENSION) == 'flv') {
    $mime = 'video';
  }
  else {
    $mime = file_get_mimetype($filepath);
    $mime = explode('/', $mime);
    $mime = $mime[0];
  }
  // is this a useable type?
  if (in_array($mime, array('image', 'video', 'audio'))) {
    return $mime;
  }
}


/**
 * Build urls for links to various things.
 *
 * This function allows for a specified URL to be used of file items, or uses
 * Drupal's default file path for XSPF file paths
 *
 * @param string $path is a path, no leading /
 * @return url
 */
function xspf_playlist_url($path, $custom_base_url = NULL) {
  // don't modify http paths
  if (strstr($path, 'http')) {
    return;
  }
  // Fetch a custom base URL, if present.
  if ( $custom_base_url = variable_get('xspf_playlist_base_url', FALSE) ) {
    // return a url with the specified prefix
    return $custom_base_url .'/'. $path;
  }
  // return the full path
  return url($path, array('absolute' => TRUE));
}


/**
 * Create an XML playlist file.
 *
 * @param array $playlist
 *   An array of configuration data.
 * @param string $type
 *   A type of object for which the playlist is being constructed, e.g., 'node', 'view'.
 * @param string $subtype
 *   A subtype for the object type. Used for node types.
 * @param object or array $object
 *   An object (e.g., node, view) for which the playlist is being constructed.
 *
 * @return string
     XML output for a playlist.
 */
function xspf_playlist_list($playlist, $type = NULL, $subtype = NULL, $object = NULL) {
  $items = $playlist['items'];
  unset($playlist['items']);
  $output = array();
  $output[] = '<?xml version="1.0" encoding="UTF-8"?>';
  $output[] = '<playlist version="1" xmlns="http://xspf.org/ns/0/">';
  $output[] = format_xml_elements($playlist) .' <trackList>';

  if (!empty($items)) {
    foreach($items as $item){
      // Add another item.
      $output[] = '   ' . xspf_playlist_item($item);
    }
  }
  $output[] = ' </trackList>';
  $output[] = '</playlist>';

  return implode("\n", $output);
}


/**
 * Create a playlist item for an xml file.
 *
 * @param array $item
 *   Keys are:
 *   - 'key': the tag name.
 *   - 'value': the tag value.
 *   - 'attributes': an array of attributues, e.g., array('rel' => 'rel')) to be applied
 *     to the tag. Will be run through drupal_attributes().
 * @return
 *   An XML string.
 */
function xspf_playlist_item($item) {
  $output = array();
  $output[] = '<track>';
  $output[] = xspf_playlist_format_xml_elements($item, '      ') .'    </track>';
  return implode("\n", $output);
}


/**
 * This copies drupal's function to provide prettier output.
 * @param $array
 * @return unknown_type
 */
function xspf_playlist_format_xml_elements($array, $spacing = '') {
  $output = '';
  foreach ($array as $key => $value) {
    if (is_numeric($key)) {
      if ($value['key']) {
        $output .= $spacing. '<'. $value['key'];
        if (isset($value['attributes']) && is_array($value['attributes'])) {
          $output .= drupal_attributes($value['attributes']);
        }

        if ($value['value'] != '') {
          $output .= '>'. (is_array($value['value']) ? format_xml_elements($value['value']) : check_plain($value['value'])) .'</'. $value['key'] .">\n";
        }
        else {
          $output .= " />\n";
        }
      }
    }
    else {
      $output .= ' <'. $key .'>'. (is_array($value) ? format_xml_elements($value) : check_plain($value)) ."</$key>\n";
    }
  }
  return $output;
}


/**
 * Build and render a playlist XML file.
 *
 * @param array $playlist
 *   A playlist.
 * @param string $type
 *   is the alter type
 * @param object $node
 *   is a node being acted on
 */
function xspf_playlist_render($playlist = array(), $type = NULL, $subtype = NULL, $object = NULL) {
  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  // Load a default configuration and then override it with any custom data.
  $playlist = array_merge(xspf_playlist_default_playlist_data(), $playlist);
  // Build the playlist.
  xspf_playlist_build_list($playlist, $type, $subtype, $object);
  print xspf_playlist_list($playlist, $type, $subtype, $object);
}


/* ******************************************************* */
/* THEME FUNCTIONS */
/* ******************************************************* */

/**
 * Register the themes
 * @return unknown_type
 */
function xspf_playlist_theme() {
  return array(
    'xspf_playlist_info' => array(
      'file' => 'xspf_playlist.module',
      'arguments' => array(
        'node' => NULL,
      ),
    ),
  );
};


/**
 * creates the potential for overriding this
 * @param $node is a node object
 * @return string
 */
function theme_xspf_playlist_info($node) {
  return variable_get('xspf_playlist_info', '');
}

